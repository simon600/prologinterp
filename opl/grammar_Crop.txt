Syntax of Sentences as Terms ----------------------------------------------------------------

sentence          --> list
                         { where list is a list of sentence }
                   |  clause
				   
clause            --> non-unit-clause | unit-clause

non-unit-clause   --> head :- body

unit-clause       --> head
       wtf?                { where head is not otherwise a sentence }

query             --> ?- body

head              --> goal
                         { where goal is not a variable }

body             --> body -> body ; body
                   |  body -> body
                   |  body ; body
                   |  body , body
                   |  goal

goal              --> term
                         { where term is not otherwise a body }

Syntax of Terms as Tokens -------------------------------------------------------------------

term-read-in      --> subterm(15) full-stop

subterm(N)        --> term(M)
                         { where M is less than or equal to N }

term(N)           --> op(N,fx) subterm(N-1)
                         { except in the case of a number }
                         { if subterm starts with a (,
                           op must be followed by layout-text }
                   |  op(N,fy) subterm(N)
                         { if subterm starts with a (,
                           op must be followed by layout-text }
                   |  subterm(N-1) op(N,xfx) subterm(N-1)
                   |  subterm(N-1) op(N,xfy) subterm(N)
                   |  subterm(N) op(N,yfx) subterm(N-1)
                   |  subterm(N-1) op(N,xf)
                   |  subterm(N) op(N,yf)

term(15)        --> subterm(14) , subterm(15)

term(0)           --> functor ( arguments )
                         { provided there is no layout-text between
                           the functor and the ( }
                   |  ( subterm(15) )
                   |  { subterm(15) }
                   |  list
                   |  string
                   |  constant
                   |  variable

op(N,T)           --> name
                         { where name has been declared as an
                           operator of type T and precedence N }

arguments         --> subterm(14)
                   |  subterm(14) , arguments

list              --> []
                   |  [ listexpr ]

listexpr          --> subterm(14)
                   |  subterm(14) , listexpr
                   |  subterm(14) | subterm(14)

constant          --> atom | number

number            --> unsigned-number
                   |  sign unsigned-number
                   |  sign inf
                   |  sign nan

unsigned-number   --> natural-number | unsigned-float

atom              --> name

functor           --> name
------------------------------------------------------------------------------------------------------------

token             --> name
                   |  natural-number
                   |  unsigned-float
                   |  variable
                   |  string
                   |  punctuation-char
                   |  layout-text
                   |  full-stop

name              --> quoted-name
                   |  word
                   |  symbol
                   |  solo-char
                   |  [ ?layout-text ]
                   |  { ?layout-text }

quoted-name       --> ' ?quoted-item... '

quoted-item       --> char  { other than ' or \ }
                   |  ''
                   |  \ escape-sequence

word              --> small-letter ?alpha...

symbol            --> symbol-char...
                         { except in the case of a full-stop
                           or where the first 2 chars are /* }

natural-number    --> digit...
                   |  base ' alpha...
                         { where each alpha must be less than the base,
                         treating a,b,... and A,B,... as 10,11,... }
                   |  0 ' char-item
                         { yielding the character code for char }

char-item         --> char  { other than \ }
                   |  \ escape-sequence
  
base              --> digit...  { in the range [2..36] }

unsigned-float    --> simple-float
                   |  simple-float exp exponent

simple-float      --> digit... . digit...

exp               --> e  |  E

exponent          --> digit... | sign digit...

sign              --> - | +

variable          --> underline ?alpha...
                   |  capital-letter ?alpha...

string            --> " ?string-item... "

string-item       --> char  { other than " or \ }
                   |  ""
                   |  \ escape-sequence

layout-text             --> layout-text-item...

layout-text-item        --> layout-char | comment

comment           --> /* ?char... */
                         { where ?char... must not contain */ }
                   |  % ?char... LFD
                         { where ?char... must not contain LFD }

full-stop         --> .
                         { the following token, if any, must be layout-text}

char              --> { any character, i.e. }
                      layout-char
                   |  alpha
                   |  symbol-char
                   |  solo-char
                   |  punctuation-char
                   |  quote-char

alpha             --> capital-letter | small-letter | digit | underline

escape-sequence   --> b        { backspace, character code 8 }
                   |  t        { horizontal tab, character code 9 }
                   |  n        { newline, character code 10 }
                   |  v        { vertical tab, character code 11 }
                   |  f        { form feed, character code 12 }
                   |  r        { carriage return, character code 13 }
                   |  e        { escape, character code 27 }
                   |  d        { delete, character code 127 }
                   |  a        { alarm, character code 7 }
                   |  x alpha alpha
                         {treating a,b,... and A,B,... as 10,11,... }
                               { in the range [0..15], hex character code }
                   |  digit ?digit ?digit 
                               { in the range [0..7], octal character code }
                   |  ^ ?      { delete, character code 127 }
                   |  ^ capital-letter
                   |  ^ small-letter
                               { the control character alpha mod 32 }
                   |  c ?layout-char... { ignored }
                   |  layout-char  { ignored }
                   |  char    { other than the above, represents itself }